/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

"use client";

import React, { useRef } from "react";
import { useGLTF } from "@react-three/drei";
import * as THREE from "three";
import { GroupProps, useFrame } from "@react-three/fiber";
export function HatModel(props: GroupProps) {
  const { nodes, materials } = useGLTF("/assets/models/hat-transformed.glb");
  const modelRef = useRef<THREE.Group>();

  useFrame((state, delta, xFrame) => {
    modelRef.current!.rotation.y += 0.015;
    // modelRef.current!.position.y =
    //   Math.sin(state.clock.elapsedTime) * 0.15 - 1.5;
  });
  return (
    <group
      {...props}
      dispose={null}
      ref={modelRef as React.Ref<THREE.Group<THREE.Object3DEventMap>>}
      scale={[1.8, 1.8, 1.8]}
      rotation={[0.4, 0, 0]}
      position={[0, 0, 0]}
    >
      <mesh
        castShadow
        receiveShadow
        geometry={(nodes.Object_2 as THREE.Mesh).geometry}
        material={materials.initialShadingGroup}
        position={[0, -3.867, 0]}
        rotation={[-Math.PI / 2, 0, 0]}
      />
    </group>
  );
}

useGLTF.preload("/assets/models/hat-transformed.glb");
